<#@ template language="C#" debug="False" hostspecific="True"  #>
<#@ assembly name="$(TargetDir)Sublogix.dll" #>
<#@ import namespace="Sublogix" #>
<#@ import namespace="Sublogix.Utility" #>
<#@ import namespace="Sublogix.Model" #>
<#@ output extension=".cs" #>
<#@ include file="SublogixSettings.ttinclude" #>
<#
    var tables = SalesLogixSchema.GetSchema(Server, Connection, UserName, Password, UseDisplayNames);
#>#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//	This code was generated by Sublogix
//	Generated at <#=DateTime.Now#>
//
//	Sublogix - Simple Repository for SalesLogix
//	Customer FX Corporation - customerfx.com
//
//	Changes to this file may cause incorrect behavior and will be lost if
//	the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Sublogix;
using Sublogix.Model;

namespace <#=Namespace#>
{
<# foreach(var table in tables)
{ #>
	<# if (table.Fields.Count == 0) continue; #>
	#region <#=table.PrettyName#>
	
	/// <summary>
	/// Table: <#=table.Name#>
	/// Primary Key: <#=table.PrimaryKey#>
	/// </summary>
	[EntityElement(Name="<#=table.Name#>", PrimaryKey="<#=table.PrimaryKey#>")]
	[Serializable]
	public class <#=table.PrettyName#> : IEntity
	{
		public <#=table.PrettyName#>() { }

		public <#=table.PrettyName#>(Repository Repository)
		{
			this.Repository = Repository;
		}
		
		#region Entity Repository

		[EntityElement(Ignore = true)]
		public Repository Repository { get; set; }

		public void Save()
		{
			if (Repository == null)
				throw new Exception("Repository has not been initialized. Use Repository.Create<<#=table.PrettyName#>>() to create the entity or save manually using the Repository Add or Update methods");
				
			if (<#=table.PrimaryKeyProperty.PrettyName#> != null && !string.IsNullOrEmpty(<#=table.PrimaryKeyProperty.PrettyName#>.ToString()) && Repository.GetById<<#=table.PrettyName#>>(<#=table.PrimaryKeyProperty.PrettyName#>.ToString()) != null)
				Repository.Update<<#=table.PrettyName#>>(this);
			else
				Repository.Add<<#=table.PrettyName#>>(this);
		}

		public void Delete()
		{
			if (Repository == null)
				throw new Exception("Repository has not been initialized. The entity must first be retrieved using the repository to be deleted.");
				
			if (<#=table.PrimaryKeyProperty.PrettyName#> == null || string.IsNullOrEmpty(<#=table.PrimaryKeyProperty.PrettyName#>.ToString()))
				throw new Exception("The primary key for the entity is missing. The entity cannot be deleted.");

			Repository.Delete<<#=table.PrettyName#>>(this);
		}
		
		#endregion
		
		#region Properties
		
	<# foreach(var field in table.Fields) { #>
	[EntityElement(Name="<#=field.Name#>"<#=field.Ignore ? ", Ignore=true" :"" #><#=field.Length.HasValue && field.DataType == "string" ? string.Format(", Length={0}", field.Length) :"" #><#=field.Ignore ? ", PrimaryKey=true" :"" #>)] public <#=field.DataType#> <#=field.PrettyName#> { get; set; }
	<# } #>
		
		#endregion
	}
	
	#endregion
	
<# } #>
}